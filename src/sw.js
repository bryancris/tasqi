
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { NavigationRoute, registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Handle SPA navigation
const handler = createHandlerBoundToURL('index.html');
const navigationRoute = new NavigationRoute(handler, {
  allowlist: [
    /^\/$/,
    /^\/dashboard/,
    /^\/notes/,
    /^\/self-care/,
    /^\/settings/,
    /^\/auth/,
  ],
});
registerRoute(navigationRoute);

// App routes - Network First strategy
registerRoute(
  ({ request }) => {
    const url = new URL(request.url);
    return (
      url.pathname.startsWith('/') ||
      url.pathname.startsWith('/dashboard') ||
      url.pathname.startsWith('/notes') ||
      url.pathname.startsWith('/self-care') ||
      url.pathname.startsWith('/settings') ||
      url.pathname.startsWith('/auth')
    );
  },
  new NetworkFirst({
    cacheName: 'app-navigation-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Google Fonts stylesheets - Cache First strategy
registerRoute(
  /^https:\/\/fonts\.googleapis\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-stylesheets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 10,
      }),
    ],
  })
);

// Google Fonts webfonts - Cache First strategy
registerRoute(
  /^https:\/\/fonts\.gstatic\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365,
        maxEntries: 10,
      }),
    ],
  })
);

// Clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheName.startsWith('workbox-')) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Skip waiting on install
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
