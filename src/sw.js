
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { NavigationRoute, registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Handle all navigation requests with a Network First strategy
const handler = createHandlerBoundToURL('index.html');
const navigationRoute = new NavigationRoute(handler, {
  allowlist: [
    // Match all routes including those with query parameters
    new RegExp('^/(?:dashboard|notes|settings|analytics|self-care|physical-wellness|mental-wellbeing|personal-growth|social-connections|daily-rituals|emotional-care|auth)(?:/.*)?(?:\\?.*)?$'),
  ],
  denylist: [
    // Deny API routes and static assets
    new RegExp('^/api'),
    new RegExp('\\.(js|css|png|jpg|svg|ico)$'),
  ],
});

registerRoute(navigationRoute);

// Cache static assets with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'script' ||
                   request.destination === 'style' ||
                   request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        maxEntries: 60
      })
    ]
  })
);

// Handle all other routes with a Network First strategy
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ]
  })
);

// Skip waiting and claim clients
self.skipWaiting();
self.clients.claim();

// Handle message events (like skipWaiting)
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
