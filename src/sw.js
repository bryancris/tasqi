
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Improved handling for skip waiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[Service Worker] Skip waiting and activate now');
    self.skipWaiting().then(() => {
      console.log('[Service Worker] Activated after skip waiting');
      
      // Broadcast that we've skipped waiting
      const broadcast = new BroadcastChannel('sw-updates');
      broadcast.postMessage({ type: 'ACTIVATED' });
      setTimeout(() => broadcast.close(), 1000);
    });
  }
});

// Activate event - claim clients so the new SW takes control immediately
self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activated');
  
  // Take control of uncontrolled clients
  event.waitUntil(clients.claim().then(() => {
    console.log('[Service Worker] Claimed clients');
    
    // Broadcast activation to any interested listeners
    const broadcast = new BroadcastChannel('sw-updates');
    broadcast.postMessage({ type: 'CLAIMED' });
    setTimeout(() => broadcast.close(), 1000);
  }));
});

// Custom notification click handler
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event);
  
  const notification = event.notification;
  notification.close();

  // Handle notification actions
  if (event.action === 'view' && event.notification.data?.reference_id) {
    const taskId = event.notification.data.reference_id;
    const urlToOpen = new URL(`/dashboard?task=${taskId}`, self.location.origin).href;
    
    event.waitUntil(
      clients.matchAll({
        type: 'window',
        includeUncontrolled: true
      }).then((windowClients) => {
        // Check if there is already a window/tab open with the target URL
        for (var i = 0; i < windowClients.length; i++) {
          var client = windowClients[i];
          if ('focus' in client) {
            client.focus();
            if (client.url !== urlToOpen) {
              client.navigate(urlToOpen);
            }
            return;
          }
        }
        // If no window/tab is already open, open a new one
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen);
        }
      })
    );
  }
});

// Handle push notifications
self.addEventListener('push', (event) => {
  console.log('Push notification received:', event);

  if (!event.data) {
    console.log('No notification data received');
    return;
  }

  try {
    const data = event.data.json();
    const options = {
      body: data.message,
      icon: '/pwa-192x192.png',
      badge: '/pwa-192x192.png',
      tag: data.groupId || 'default',
      data: data.data || {},
      actions: [
        {
          action: 'view',
          title: 'View'
        }
      ],
      requireInteraction: data.priority === 'high'
    };

    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  } catch (error) {
    console.error('Error handling push notification:', error);
  }
});

// Cache static assets
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Cache other static resources
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'font',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Handle offline fallbacks
registerRoute(
  // Match any navigation request
  ({ request }) => request.mode === 'navigate',
  // Use a Network First strategy with offline fallback
  new NetworkFirst({
    // Cache name
    cacheName: 'pages',
    plugins: [
      // Cache only 50 pages
      new ExpirationPlugin({
        maxEntries: 50,
        // Cache for a maximum of 7 days
        maxAgeSeconds: 7 * 24 * 60 * 60,
      }),
    ],
  })
);

// Broadcast update messages to clients
self.addEventListener('updatefound', () => {
  console.log('[Service Worker] Update found');
  const newWorker = self.registration.installing;
  
  newWorker.addEventListener('statechange', () => {
    console.log('[Service Worker] New worker state:', newWorker.state);
    
    if (newWorker.state === 'installed') {
      const broadcast = new BroadcastChannel('sw-updates');
      broadcast.postMessage({ type: 'UPDATE_FOUND' });
      setTimeout(() => broadcast.close(), 1000);
    }
  });
});
